mod xgb_inference;

fn main(input_vector: Span<i32>) -> i32 {
    let tree_0 = xgb_inference::Tree {
    base_weights: array![0, 1288, -5846, -26637, 1289, 1289, -41557, -83195, 1289, 1288, -88502, -28710, -22068].span(),
    left_children: array![1, 0, 3, 5, 0, 0, 7, 9, 0, 0, 11, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 0, 8, 10, 0, 0, 12, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 0, 1, 2, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 1288, 5400000, 100000, 1289, 1289, 6500000, 100000, 1289, 1288, 800000, -28710, -22068].span()
};
    let tree_1 = xgb_inference::Tree {
    base_weights: array![0, 902, -4092, -18646, 902, -13804, -70666, -4899, -43335, 895, -71417, -12139, 4859, -65241, 902, -20093, -22088, 902, -18461, 4407, 908, 900, -20097].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 9, 11, 13, 0, 15, 17, 19, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 10, 12, 14, 0, 16, 18, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 5, 0, 2, 0, 5, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 902, 5400000, 4200000, 902, 6000000, 100000, 600000, 600000, 895, 800000, 100000, 2900000, 100000, 902, -20093, -22088, 902, -18461, 4407, 908, 900, -20097].span()
};
    let tree_2 = xgb_inference::Tree {
    base_weights: array![0, 631, -2865, -13053, 632, -9663, -49470, -3429, -30335, 629, -49995, -8498, 3401, -45669, 631, -14067, -15462, 632, -12923, 3130, 615, 631, -14068].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 9, 11, 13, 0, 15, 17, 19, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 10, 12, 14, 0, 16, 18, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 5, 0, 2, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 631, 5400000, 4200000, 632, 6000000, 100000, 600000, 600000, 629, 800000, 100000, 5000000, 100000, 631, -14067, -15462, 632, -12923, 3130, 615, 631, -14068].span()
};
    let tree_3 = xgb_inference::Tree {
    base_weights: array![0, 442, -2005, -9137, 442, -14621, 2459, 1416, -29380, 1470, 10310, 442, -1163, -34824, -19868, 819, 1481, -458, 442, -10128, -12672, -10406, 2532, -308, 442, 445, 363].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 9, 11, 13, 15, 0, 0, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 10, 12, 14, 16, 0, 0, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 1, 4, 5, 1, 0, 0, 0, 5, 1, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 442, 5400000, 6500000, 442, 100000, 10000000, 600000, 3200000, 100000, 10310, 442, 4200000, 3100000, 600000, 6000000, 3300000, -458, 442, -10128, -12672, -10406, 2532, -308, 442, 445, 363].span()
};
    let tree_4 = xgb_inference::Tree {
    base_weights: array![0, 309, -1404, -6396, 309, -10235, 1721, 991, -20567, 1029, 7219, 309, -814, -24378, -13908, 573, 1037, -321, 310, -6810, -8150, -7284, 1773, -216, 310, 312, 254].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 9, 11, 13, 15, 0, 0, 17, 19, 21, 23, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 10, 12, 14, 16, 0, 0, 18, 20, 22, 24, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 1, 4, 5, 1, 0, 0, 0, 5, 0, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 309, 5400000, 6500000, 309, 100000, 10000000, 600000, 3200000, 100000, 7219, 309, 4200000, 800000, 600000, 6000000, 3300000, -321, 310, -6810, -8150, -7284, 1773, -216, 310, 312, 254].span()
};
    let tree_5 = xgb_inference::Tree {
    base_weights: array![0, 722, -983, 720, 217, -4478, 217, 718, 217, -7165, 1205, 714, 217, 694, -14397, 721, 5055, 706, 217, 217, -570, -17065, -9736, 402, 726, 207, 217, -11, -370, -4932, -6427, -5099, 1241, -151, 217, 218, 178].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 17, 0, 19, 21, 23, 0, 25, 0, 0, 27, 29, 31, 33, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 18, 0, 20, 22, 24, 0, 26, 0, 0, 28, 30, 32, 34, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 1, 0, 6, 0, 1, 4, 4, 0, 5, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 217, 6500000, 217, 100000, 217, 100000, 10000000, 100000, 217, 600000, 3200000, 100000, 5055, 100000, 217, 217, 100000, 3100000, 600000, 6000000, 3300000, 207, 217, -11, -370, -4932, -6427, -5099, 1241, -151, 217, 218, 178].span()
};
    let tree_6 = xgb_inference::Tree {
    base_weights: array![0, 505, -688, 504, 152, -3134, 152, 502, 152, -2299, -12107, 500, 152, -4446, 786, 221, -12238, 494, 152, 497, -9124, 496, 3540, -3289, -3862, 145, 152, 152, -72, -3521, 674, -170, 152].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 17, 0, 19, 21, 0, 23, 25, 0, 27, 29, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 18, 0, 20, 22, 0, 24, 26, 0, 28, 30, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 5, 0, 6, 0, 0, 0, 4, 0, 1, 4, 0, 0, 2, 0, 5, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 152, 4200000, 152, 100000, 152, 6500000, 100000, 100000, 152, 100000, 11200000, 221, 800000, 100000, 152, 600000, 600000, 600000, 3540, -3289, -3862, 145, 152, 152, -72, -3521, 674, -170, 152].span()
};
    let tree_7 = xgb_inference::Tree {
    base_weights: array![0, 354, -482, 353, 106, -2194, 106, 352, 106, -6969, -1250, 350, 106, 4123, -8549, -3274, 1068, 346, 106, 373, 8349, -297, -8986, 340, -7841, 13155, 352, 102, 106, 106, 201, 8092, 2479, -3, -194, -2937, -1849, -111, 106, -2176, -2789, 16277, 3792, 45, 107].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 17, 0, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 18, 0, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 2, 0, 6, 0, 5, 0, 4, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 106, 700000, 106, 100000, 106, 500000, 600000, 100000, 106, 100000, 100000, 200000, 5000000, 100000, 106, 3600000, 5000000, 100000, 400000, 100000, 5500000, 100000, 6500000, 102, 106, 106, 201, 8092, 2479, -3, -194, -2937, -1849, -111, 106, -2176, -2789, 16277, 3792, 45, 107].span()
};
    let tree_8 = xgb_inference::Tree {
    base_weights: array![0, 248, -337, 247, 74, -1536, 74, 246, 74, -4878, -875, 245, 74, 2890, -5984, -2292, 748, 242, 74, 261, 5852, -6307, 974, 238, -5489, 9215, 246, 71, 74, 74, 141, 6069, 1736, -2551, -1722, -53, 1037, -78, 74, -1523, -1953, 11523, 2655, 75, 39].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 17, 0, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 18, 0, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 2, 0, 6, 0, 5, 0, 4, 0, 1, 3, 0, 0, 2, 0, 0, 0, 5, 0, 0, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 74, 700000, 74, 100000, 74, 500000, 600000, 100000, 74, 100000, 6400000, 200000, 5000000, 100000, 74, 3600000, 5000000, 600000, 5000000, 100000, 5500000, 100000, 25400000, 71, 74, 74, 141, 6069, 1736, -2551, -1722, -53, 1037, -78, 74, -1523, -1953, 11523, 2655, 75, 39].span()
};
    let tree_9 = xgb_inference::Tree {
    base_weights: array![0, 173, -236, 173, 52, -1075, 52, 172, 52, -3414, -612, 172, 52, 2429, -4151, -1604, 524, 169, 52, 602, 4088, -4553, 451, 167, -3842, 6455, 172, 50, 52, 58, 388, 2957, 1215, -1801, -1123, 6, 705, -250, 51, -1066, -1367, 8157, 1859, 13, 53].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 0, 11, 0, 13, 15, 17, 0, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 37, 39, 41, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 0, 12, 0, 14, 16, 18, 0, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 38, 40, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 2, 0, 6, 0, 3, 0, 4, 0, 1, 3, 0, 0, 2, 0, 5, 0, 2, 1, 2, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 52, 700000, 52, 100000, 52, 2000000, 600000, 100000, 52, 100000, 6400000, 200000, 5000000, 100000, 52, 500000, 5000000, 300000, 3400000, 3900000, 5500000, 100000, 6500000, 50, 52, 58, 388, 2957, 1215, -1801, -1123, 6, 705, -250, 51, -1066, -1367, 8157, 1859, 13, 53].span()
};
    let tree_10 = xgb_inference::Tree {
    base_weights: array![0, 36, -165, -752, 36, -2697, -462, 1496, -3449, -1219, 464, 155, 2870, -3558, 1869, 117, -2726, 5714, 121, 34, 237, 3812, 848, -1109, 241, 1010, 517, 37, -55, -936, -746, 5217, 1312, 62, 35].span(),
    left_children: array![1, 0, 3, 5, 0, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 0, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 2, 0, 6, 0, 1, 1, 0, 0, 0, 1, 0, 3, 1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 36, 5400000, 400000, 36, 4000000, 800000, 100000, 3400000, 200000, 5000000, 3600000, 3400000, 18600000, 2100000, 8000000, 2400000, 2500000, 100000, 34, 237, 3812, 848, -1109, 241, 1010, 517, 37, -55, -936, -746, 5217, 1312, 62, 35].span()
};
    let tree_11 = xgb_inference::Tree {
    base_weights: array![0, 85, -116, 85, 26, -720, 21, 84, 26, 88, -1771, -981, 112, 84, 26, 436, 87, -2016, 1081, -1801, 25, 744, 85, 82, 26, 90, 788, 86, 47, -1864, -925, 7912, 1035, 263, -1935, 62, 2934, 93, 84, 24, 26, 11, 115, 41, 26, -567, 4346, 597, 26, 177, -1, -689, -300, 23, 6, 897, -943, 227, 26, -38, 25].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 27, 29, 31, 33, 0, 35, 37, 39, 0, 41, 0, 43, 0, 45, 0, 0, 47, 49, 51, 53, 55, 57, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 28, 30, 32, 34, 0, 36, 38, 40, 0, 42, 0, 44, 0, 46, 0, 0, 48, 50, 52, 54, 56, 58, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 1, 2, 6, 0, 3, 0, 5, 3, 4, 0, 5, 6, 0, 1, 1, 0, 3, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 4, 2, 2, 0, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 600000, 100000, 26, 100000, 700000, 100000, 26, 600000, 6500000, 5400000, 2900000, 100000, 26, 500000, 2400000, 5000000, 11600000, 100000, 25, 2500000, 900000, 100000, 26, 100000, 788, 100000, 47, 600000, -925, 7912, 6600000, 1600000, 400000, 25400000, 5000000, 9300000, 3300000, 24, 26, 11, 115, 41, 26, -567, 4346, 597, 26, 177, -1, -689, -300, 23, 6, 897, -943, 227, 26, -38, 25].span()
};
    let tree_12 = xgb_inference::Tree {
    base_weights: array![0, 18, -81, -504, 15, 62, -1239, -687, 78, 313, 61, -1411, 760, -1247, 95, 521, 60, 64, 566, 60, 33, -1801, -1175, 6013, 725, -553, -1539, 51, 568, 43, 2054, 65, 59, 8, 82, 29, 18, -487, -647, -408, -132, 418, 18, -427, 3704, -524, -430, 17, -718, 22, 9, 628, -670, 159, 18, -27, 18].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 0, 35, 0, 37, 39, 0, 41, 43, 45, 47, 0, 49, 51, 53, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 0, 36, 0, 38, 40, 0, 42, 44, 46, 48, 0, 50, 52, 54, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 2, 3, 0, 3, 3, 5, 6, 2, 1, 7, 0, 3, 2, 2, 0, 2, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 18, 600000, 100000, 700000, 600000, 6500000, 6400000, 2900000, 500000, 2400000, 2400000, 11600000, 3200000, 5000000, 2500000, 900000, 100000, 566, 100000, 33, 5000000, 3100000, 6013, 6600000, 100000, 800000, 200000, 568, 100000, 5000000, 9300000, 3300000, 8, 82, 29, 18, -487, -647, -408, -132, 418, 18, -427, 3704, -524, -430, 17, -718, 22, 9, 628, -670, 159, 18, -27, 18].span()
};
    let tree_13 = xgb_inference::Tree {
    base_weights: array![0, 12, -57, -263, 44, -959, -159, 214, 42, -1165, 1077, -433, 177, 146, 13, 52, 12, 235, -1343, 293, 1522, 40, -967, 2596, 128, 12, 17, 9, 217, -520, -301, 1041, 399, 13, -18, -324, -189, 489, 12].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 0, 27, 29, 0, 31, 33, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 0, 28, 30, 0, 32, 34, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 2, 2, 1, 0, 3, 3, 1, 5, 0, 2, 0, 0, 2, 0, 0, 0, 0, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 12, 5400000, 400000, 100000, 3400000, 800000, 4500000, 1700000, 100000, 3300000, 200000, 600000, 146, 13, 8400000, 12, 3600000, 6500000, 293, 2100000, 8000000, 18000000, 2596, 5000000, 12, 17, 9, 217, -520, -301, 1041, 399, 13, -18, -324, -189, 489, 12].span()
};
    let tree_14 = xgb_inference::Tree {
    base_weights: array![0, 29, -40, 29, 9, -184, 31, 29, 9, -671, -111, 150, 29, 28, 9, -815, 755, -303, 124, 102, 9, 37, 9, 27, 9, 165, -940, 205, 1070, 28, -677, 1820, 90, 8, 12, 8, 9, 7, 152, -458, -240, 740, 280, 9, -13, -242, -137, 343, 8].span(),
    left_children: array![1, 3, 5, 7, 0, 9, 11, 13, 0, 15, 17, 19, 21, 23, 0, 25, 27, 29, 31, 0, 0, 33, 0, 35, 0, 37, 39, 0, 41, 43, 45, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 0, 10, 12, 14, 0, 16, 18, 20, 22, 24, 0, 26, 28, 30, 32, 0, 0, 34, 0, 36, 0, 38, 40, 0, 42, 44, 46, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 1, 0, 2, 2, 6, 0, 1, 0, 3, 3, 4, 0, 1, 5, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 100000, 5400000, 100000, 9, 400000, 100000, 100000, 9, 3400000, 800000, 4500000, 1700000, 100000, 9, 100000, 3300000, 200000, 600000, 102, 9, 8400000, 9, 100000, 9, 3600000, 5000000, 205, 2100000, 100000, 6400000, 1820, 5000000, 8, 12, 8, 9, 7, 152, -458, -240, 740, 280, 9, -13, -242, -137, 343, 8].span()
};
    let tree_15 = xgb_inference::Tree {
    base_weights: array![0, 6, -28, -129, 22, -470, -78, 105, 20, -571, 529, -212, 87, 72, 6, 26, 6, -353, -884, 144, 751, 20, -474, 1275, 63, 6, 8, 35, -139, 2139, -267, 526, 196, 5, 37, -192, -112, 240, 6].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 0, 27, 29, 0, 31, 33, 35, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 0, 28, 30, 0, 32, 34, 36, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 2, 2, 1, 0, 3, 3, 1, 0, 0, 2, 0, 0, 2, 0, 1, 5, 0, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 6, 5400000, 400000, 100000, 3400000, 800000, 4500000, 1700000, 1600000, 6600000, 200000, 600000, 72, 6, 8400000, 6, 100000, 100000, 144, 2100000, 6000000, 2400000, 1275, 5000000, 6, 8, 35, -139, 2139, -267, 526, 196, 5, 37, -192, -112, 240, 6].span()
};
    let tree_16 = xgb_inference::Tree {
    base_weights: array![0, 4, -19, -90, 15, -329, -54, 73, 14, 340, -407, -149, 61, 50, 4, 18, 4, 2617, 330, -799, -325, 14, -332, 894, 44, 4, 6, 1604, -1115, 87, 138, -246, 374, 17, -113, 5, -18, -119, -42, 168, 4].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 0, 0, 25, 0, 27, 29, 31, 33, 35, 37, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 0, 0, 26, 0, 28, 30, 32, 34, 36, 38, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 5, 2, 2, 3, 0, 3, 3, 0, 3, 0, 2, 0, 0, 2, 0, 5, 5, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 4, 5400000, 400000, 100000, 1900000, 800000, 4500000, 1700000, 5000000, 2100000, 200000, 600000, 50, 4, 8400000, 4, 100000, 500000, 5000000, 100000, 100000, 18000000, 894, 5000000, 4, 6, 1604, -1115, 87, 138, -246, 374, 17, -113, 5, -18, -119, -42, 168, 4].span()
};
    let tree_17 = xgb_inference::Tree {
    base_weights: array![0, 3, -14, -81, 6, 14, -185, -84, 11, 149, 11, -238, 42, 116, -215, 714, 11, -140, 197, 51, 11, -452, -192, 275, 0, 17, 52, -78, 4, -1, 3802, 17, 10, 35, 97, 1, 3, 1203, -137, -91, 1, 74, 3802, 2, -485, 1, 14, 567, 4, -21, 3].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 33, 0, 35, 37, 39, 41, 43, 45, 0, 0, 0, 0, 0, 47, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 34, 0, 36, 38, 40, 42, 44, 46, 0, 0, 0, 0, 0, 48, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 3, 1, 5, 2, 1, 3, 5, 5, 3, 2, 5, 1, 0, 0, 4, 0, 4, 0, 2, 5, 0, 0, 3, 6, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 3, 6400000, 100000, 100000, 100000, 6500000, 22100000, 500000, 500000, 600000, 300000, 500000, 100000, 600000, 100000, 100000, -140, 1400000, 51, 500000, 100000, 800000, 6600000, 2100000, 1400000, 52, -78, 4, -1, 3802, 3300000, 7700000, 35, 97, 1, 3, 1203, -137, -91, 1, 74, 3802, 2, -485, 1, 14, 567, 4, -21, 3].span()
};
    let tree_18 = xgb_inference::Tree {
    base_weights: array![0, 2, -9, -113, -2, 30, -222, -169, 1, 162, 3, -446, -175, -63, -83, 215, 0, 902, 153, -74, 14, -865, -443, 178, -219, -19, 33, 9, 626, -76, 2, 35, 52, 0, -60, 141, 2, -131, -317, 30, 141, -70, -64, 2, 151, -11, 3].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 0, 27, 29, 0, 31, 33, 35, 0, 37, 39, 41, 0, 0, 43, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 0, 28, 30, 0, 32, 34, 36, 0, 38, 40, 42, 0, 0, 44, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 2, 6, 3, 3, 0, 1, 2, 4, 5, 3, 2, 0, 0, 0, 2, 0, 4, 5, 5, 0, 3, 1, 0, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 2, 400000, 4000000, 400000, 2100000, 5000000, 1600000, 600000, 100000, 4200000, 1700000, 100000, 600000, -83, 100000, 700000, 902, 16800000, 600000, 5400000, -865, 2100000, 100000, 6500000, -19, 33, 100000, 626, -76, 100000, 35, 52, 0, -60, 141, 2, -131, -317, 30, 141, -70, -64, 2, 151, -11, 3].span()
};
    let tree_19 = xgb_inference::Tree {
    base_weights: array![0, 1, -7, -79, -1, 21, -156, -118, 1, 114, 2, -313, -122, -44, -58, 151, 0, 677, 107, -52, 10, -692, -311, 125, -154, -13, 25, 6, 439, -53, 1, 36, 24, 0, -42, 99, 2, -92, -225, -107, 45, -49, -45, 1, 109, -8, 2].span(),
    left_children: array![1, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 0, 27, 29, 0, 31, 33, 35, 0, 37, 39, 41, 0, 0, 43, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 0, 28, 30, 0, 32, 34, 36, 0, 38, 40, 42, 0, 0, 44, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 0, 2, 6, 3, 3, 0, 1, 2, 4, 5, 3, 2, 0, 0, 0, 2, 0, 5, 5, 5, 0, 3, 5, 0, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![300000, 1, 400000, 4000000, 400000, 2100000, 5000000, 1600000, 600000, 100000, 4200000, 1700000, 100000, 600000, -58, 100000, 700000, 677, 3700000, 600000, 5400000, -692, 2100000, 500000, 6500000, -13, 25, 100000, 439, -53, 100000, 36, 24, 0, -42, 99, 2, -92, -225, -107, 45, -49, -45, 1, 109, -8, 2].span()
};
    let tree_20 = xgb_inference::Tree {
    base_weights: array![0, 4, -6, 5, -32, -196, -2, 3, 28, -40, -5, 0, -64, -65, 3, 1, -31, 85, 25, 1, -28, -118, 6, 1697, 1, -9, 18, 577, 83, 26, 7, -107, 2, -128, 81, 0, 243, 972, 7757, 237, -1, 508, -554, 19, 43, 40, 8, 1, 2, -64, -32, 17, 212, -15, 2, -77, 76, 308, 7, 2658, 7, 1046, 62, -24, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 19, 0, 0, 21, 23, 0, 25, 27, 29, 0, 31, 33, 35, 37, 39, 0, 0, 41, 43, 45, 47, 0, 0, 49, 51, 53, 55, 57, 59, 61, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 20, 0, 0, 22, 24, 0, 26, 28, 30, 0, 32, 34, 36, 38, 40, 0, 0, 42, 44, 46, 48, 0, 0, 50, 52, 54, 56, 58, 60, 62, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 2, 3, 3, 6, 1, 2, 3, 2, 0, 0, 0, 0, 3, 3, 0, 0, 0, 5, 0, 0, 1, 0, 3, 3, 0, 0, 5, 5, 3, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1900000, 24500000, 2000000, 400000, 100000, 100000, 400000, 300000, 100000, -40, 100000, 0, -64, 3800000, 2500000, 1, 600000, 5000000, 100000, 1, 6500000, 3400000, 6200000, 2400000, 2900000, -9, 18, 100000, 500000, 600000, 100000, -107, 2, 5000000, 100000, 4200000, 3300000, 5000000, 12500000, 100000, 700000, 508, -554, 19, 43, 40, 8, 1, 2, -64, -32, 17, 212, -15, 2, -77, 76, 308, 7, 2658, 7, 1046, 62, -24, 0].span()
};
    let tree_21 = xgb_inference::Tree {
    base_weights: array![0, 4, -3, 2, 7, -59, 1, 2, 1, 18, 3, -3, -107, 2, -36, 2, 1, 18, -75, 50, 2, -7, 1, -49, -73, 1, 79, -110, 9, 1, 1, 18, 16, -290, 102, 2, 9, -82, 1, -6, 4, 137, 1, -28, -75, 4, 8, 0, 1, 5, -83, -114, -81, 193, 25, -1, 1, 8, 1, -30, -22, 1, -45, -25, 1, 28, 42, 2, 1].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 21, 23, 25, 27, 29, 0, 31, 0, 33, 35, 0, 0, 0, 37, 39, 41, 43, 45, 47, 0, 49, 0, 51, 53, 55, 57, 59, 0, 61, 63, 65, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 22, 24, 26, 28, 30, 0, 32, 0, 34, 36, 0, 0, 0, 38, 40, 42, 44, 46, 48, 0, 50, 0, 52, 54, 56, 58, 60, 0, 62, 64, 66, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 3, 1, 0, 5, 3, 2, 6, 0, 6, 3, 0, 0, 2, 0, 4, 0, 6, 0, 5, 3, 0, 0, 0, 2, 0, 6, 0, 1, 2, 0, 6, 0, 6, 5, 5, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![700000, 300000, 3000000, 100000, 100000, 400000, 24500000, 100000, 1, 13000000, 600000, 600000, 600000, 17200000, 6500000, 100000, 1, 12700000, -75, 500000, 25400000, -7, 1, -49, 700000, 600000, 3300000, 600000, 25500000, 100000, 1, 1400000, 16, 4000000, 600000, 4200000, 25500000, 800000, 1, 200000, 3200000, 100000, 1, -28, -75, 7400000, 8, 0, 1, 5, -83, -114, -81, 193, 25, -1, 1, 8, 1, -30, -22, 1, -45, -25, 1, 28, 42, 2, 1].span()
};
    let tree_22 = xgb_inference::Tree {
    base_weights: array![0, 3, -2, 0, 5, -42, 1, 13, 2, -2, -75, -3, 5, 13, -11, 35, 2, -5, 1, -34, -51, 1, -84, 6277, 5, 12, 28, -2, -64, -206, 72, 1, 6, -57, 0, 2, -39, -93, 56, 2086, -970, 117, 0, 4, -9, 11, 7, -83, -57, 138, 17, -1, 0, 6, 0, -21, -15, 0, 20, -23, 1, -45, -22, 12, 150, 66, 19, -17, 0].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 0, 0, 33, 35, 37, 39, 41, 43, 45, 0, 0, 47, 49, 51, 53, 55, 0, 57, 59, 61, 63, 0, 0, 65, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 0, 0, 34, 36, 38, 40, 42, 44, 46, 0, 0, 48, 50, 52, 54, 56, 0, 58, 60, 62, 64, 0, 0, 66, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 3, 1, 0, 5, 3, 3, 4, 3, 0, 0, 3, 3, 3, 0, 5, 3, 0, 0, 0, 2, 2, 1, 5, 4, 0, 0, 0, 0, 6, 5, 5, 3, 0, 0, 3, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![700000, 300000, 3000000, 0, 100000, 400000, 2100000, 1300000, 600000, 600000, 600000, 1900000, 2500000, 7600000, 100000, 500000, 25400000, -5, 1, -34, 700000, 24500000, 6500000, 500000, 100000, 3600000, 6500000, -2, -64, 4000000, 600000, 4200000, 25500000, 800000, 0, 900000, 6500000, 100000, 100000, 2086, -970, 3400000, 3200000, 4, -9, 11, 7, -83, -57, 138, 17, -1, 0, 6, 0, -21, -15, 0, 20, -23, 1, -45, -22, 12, 150, 66, 19, -17, 0].span()
};
    let tree_23 = xgb_inference::Tree {
    base_weights: array![0, 2, -2, 0, 3, -29, 1, 9, 1, -1, -52, 1, -19, 9, 2, -29, 1, -3, 0, -24, -36, 0, 45, -54, 1, 9, 55, 1, -22, -3, -289, 16, 1, -40, 0, 3, -3, 78, 1, -13, -46, -45, 3, 99, 13, -1, 7, 0, 6, -3, 0, -15, -11, 0, 3, -25, 0, 20, 23].span(),
    left_children: array![1, 3, 5, 0, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 0, 0, 33, 35, 37, 39, 0, 41, 43, 0, 0, 45, 0, 47, 49, 51, 0, 53, 55, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 0, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 0, 0, 34, 36, 38, 40, 0, 42, 44, 0, 0, 46, 0, 48, 50, 52, 0, 54, 56, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![1, 3, 1, 0, 3, 3, 2, 5, 3, 0, 0, 2, 0, 5, 0, 3, 5, 0, 0, 0, 2, 2, 6, 0, 0, 2, 5, 0, 0, 0, 0, 0, 6, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![700000, 300000, 3000000, 0, 1900000, 400000, 24500000, 3700000, 2900000, 600000, 600000, 17200000, 6500000, 500000, 100000, 2500000, 100000, -3, 0, -24, 700000, 1700000, 3300000, 600000, 1, 100000, 600000, 1, -22, 100000, -289, 3600000, 1400000, 800000, 0, 400000, 2400000, 100000, 1, -13, -46, -45, 3, 99, 13, -1, 7, 0, 6, -3, 0, -15, -11, 0, 3, -25, 0, 20, 23].span()
};
    let tree_24 = xgb_inference::Tree {
    base_weights: array![0, 1, -3, 1, -2, -47, 0, 0, 7, -31, 1, -437, -40, 1, -2, 1, -40, 2926, 6, -37, -7, 1, 18, 391, -554, -55, 20, 3, 0, 0, -1, 1, -10, -8, -58, 4423, 5, 70, 0, -10, -12, 2, 1, 14, 0, 146, 84, -133, -218, -17, 2, 78, 0, 0, 4, 0, 2, -9, -1, -19, 221, -17, 5, 1478, -777, 20, 562, -311, 0, 0, 1, 0, 0, 28, 14].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 0, 41, 43, 45, 47, 49, 51, 53, 0, 0, 0, 55, 57, 59, 61, 63, 0, 65, 67, 0, 0, 69, 71, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 0, 42, 44, 46, 48, 50, 52, 54, 0, 0, 0, 56, 58, 60, 62, 64, 0, 66, 68, 0, 0, 70, 72, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 7, 5, 3, 7, 2, 0, 3, 3, 0, 4, 2, 3, 2, 1, 2, 2, 0, 5, 0, 0, 6, 0, 2, 2, 0, 0, 2, 0, 0, 0, 3, 6, 2, 0, 5, 0, 1, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![22100000, 3400000, 3300000, 2100000, 4800000, 6000000, 25500000, 1900000, 2500000, 6500000, 23000000, 500000, 24000000, 500000, 25500000, 24500000, 600000, 12500000, 3300000, 800000, -7, 2400000, 6600000, 100000, 3900000, 600000, 100000, 400000, 0, 0, -1, 400000, 100000, 500000, 600000, 500000, 5, 5500000, 2900000, -10, -12, 4000000, 1700000, 14, 0, 146, 84, -133, -218, -17, 2, 16900000, 0, 0, 4, 0, 2, -9, -1, -19, 221, -17, 5, 1478, -777, 20, 562, -311, 0, 0, 1, 0, 0, 28, 14].span()
};
    let tree_25 = xgb_inference::Tree {
    base_weights: array![0, 0, -2, 1, -1, -33, 0, 0, 5, -16, 1, -307, -28, 0, 0, 1, -28, 3116, 4, 0, -21, 1, 13, 284, -390, -38, 14, 2, 0, 1, -7, -33, 59, 3493, -621, 58, 0, -85, -21, 2, 0, 9, 0, 106, 61, -93, -154, -12, 0, 54, 0, 0, 3, 0, 1, -6, -1, -26, -5, 14, 113, 942, 1796, 17, 406, -220, 0, 7, -213, -8, -5, 0, 1, 20, 10].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 0, 29, 31, 33, 35, 0, 37, 39, 41, 43, 45, 47, 49, 51, 0, 53, 55, 57, 59, 61, 0, 63, 65, 67, 69, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 0, 30, 32, 34, 36, 0, 38, 40, 42, 44, 46, 48, 50, 52, 0, 54, 56, 58, 60, 62, 0, 64, 66, 68, 70, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![3, 7, 5, 3, 7, 2, 0, 3, 3, 2, 4, 2, 3, 2, 0, 2, 1, 5, 5, 0, 3, 6, 0, 2, 2, 0, 0, 2, 0, 3, 6, 2, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![20900000, 200000, 3300000, 2100000, 4800000, 6000000, 25500000, 1700000, 2500000, 100000, 23000000, 500000, 24000000, 500000, 0, 24500000, 6500000, 500000, 3300000, 0, 2900000, 2400000, 6600000, 100000, 3900000, 600000, 100000, 400000, 0, 400000, 100000, 100000, 100000, 5000000, -621, 6500000, 2900000, 2500000, 6500000, 4000000, 0, 9, 0, 106, 61, -93, -154, -12, 0, 16900000, 0, 0, 3, 0, 1, -6, -1, -26, -5, 14, 113, 942, 1796, 17, 406, -220, 0, 7, -213, -8, -5, 0, 1, 20, 10].span()
};
    let tree_26 = xgb_inference::Tree {
    base_weights: array![0, 1, -1, 1, 176, -5, 0, 0, 5, 2750, 15, -1, -11, 0, -2, 1, -13, 26, -1, 648, 1833, -2, 0, 1, -2, -23, 0, 1, 24, -43, 0, 0, 141, -5, 0, -3, 0, 0, -52, 1, 5, -14, 0, -292, -20, 0, -17, 8, -448, -12, -147, 43, -1, 1738, 29, 3, 0, -1, -60, 1, 0, -5, -1, 0, -1, -62, -108, -8, 3].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 21, 0, 23, 25, 27, 29, 31, 33, 0, 0, 35, 37, 39, 41, 43, 0, 45, 47, 49, 51, 0, 53, 0, 55, 57, 0, 0, 0, 59, 0, 61, 63, 65, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 22, 0, 24, 26, 28, 30, 32, 34, 0, 0, 36, 38, 40, 42, 44, 0, 46, 48, 50, 52, 0, 54, 0, 56, 58, 0, 0, 0, 60, 0, 62, 64, 66, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 5, 2, 3, 3, 4, 3, 0, 2, 0, 2, 5, 3, 5, 0, 4, 0, 0, 5, 1, 2, 6, 2, 0, 5, 5, 3, 5, 0, 5, 0, 2, 3, 0, 0, 0, 2, 0, 3, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 1300000, 2400000, 400000, 100000, 2300000, 20900000, 1900000, 100000, 2500000, 15, 1700000, -11, 22400000, 3300000, 600000, 3600000, 1500000, 1000000, 648, 1833, 3300000, 2300000, 17200000, 100000, 6000000, 0, 25300000, 100000, 7700000, 5300000, 0, 500000, -5, 500000, 19400000, 0, 0, -52, 4000000, 5, 2900000, 100000, 3900000, 24000000, 0, -17, 8, -448, -12, -147, 43, -1, 1738, 29, 3, 0, -1, -60, 1, 0, -5, -1, 0, -1, -62, -108, -8, 3].span()
};
    let tree_27 = xgb_inference::Tree {
    base_weights: array![0, 1, -1, 1, 130, -3, 0, 0, 4, 2071, 11, -1, -7, 1, -1, 0, -9, 49, 2, 465, 1558, -1, 0, 2, 0, -7, 0, 0, 15, -30, 0, 7, 148, 4, -17, -3, 0, 0, -37, 0, 1, 0, 1, -14, 0, 0, -12, 0, 0, 145, 4, -3, -18, 30, -1, 2, 43, 1, 19, -2, -83, 0, -5, 0, 0, -3, -6, 0, 2, -31, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 21, 0, 23, 25, 27, 29, 31, 33, 0, 0, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 0, 57, 59, 61, 0, 0, 0, 0, 0, 63, 0, 65, 0, 67, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 22, 0, 24, 26, 28, 30, 32, 34, 0, 0, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 0, 58, 60, 62, 0, 0, 0, 0, 0, 64, 0, 66, 0, 68, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 5, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 3, 5, 0, 5, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 5, 5, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 1300000, 2400000, 400000, 100000, 2300000, 700000, 1900000, 600000, 2500000, 11, 1700000, -7, 4000000, 3100000, 300000, 3600000, 1500000, 3300000, 465, 1558, 100000, 2300000, 100000, 300000, 600000, 25400000, 700000, 5000000, 600000, 5300000, 100000, 148, 800000, 5000000, 4000000, 0, 0, -37, 0, 1, 13200000, 1, 400000, 0, 17200000, 6500000, 0, 0, 145, 4, -3, -18, 30, -1, 2, 43, 1, 19, -2, -83, 0, -5, 0, 0, -3, -6, 0, 2, -31, 0].span()
};
    let tree_28 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, 97, -2, 0, 0, 3, 1569, 7, -1, -5, 0, -1, 0, -6, 34, 1, 335, 1325, 0, 0, 2, 0, -5, 0, 0, 10, -21, 0, 5, 103, 3, -12, 0, -27, 0, 1, 0, 0, -10, 0, 0, -9, 0, 0, 107, 3, -6, -99, 15, -1, 0, 5, 0, 13, -1, -58, 0, 0, -2, -4, 2, 0, -22, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 0, 21, 0, 23, 25, 27, 29, 31, 33, 0, 0, 0, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 0, 55, 57, 0, 0, 0, 0, 59, 0, 61, 0, 63, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 22, 0, 24, 26, 28, 30, 32, 34, 0, 0, 0, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 0, 56, 58, 0, 0, 0, 0, 60, 0, 62, 0, 64, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 2, 5, 2, 1, 3, 2, 3, 0, 2, 0, 2, 1, 3, 5, 0, 5, 0, 0, 0, 1, 0, 2, 0, 2, 1, 0, 3, 7, 4, 0, 5, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 1300000, 2400000, 400000, 100000, 2300000, 700000, 1900000, 600000, 2500000, 7, 1700000, -5, 4000000, 3100000, 300000, 3600000, 1500000, 3300000, 335, 1325, 0, 2300000, 100000, 25400000, 600000, 25400000, 11200000, 5000000, 7700000, 100000, 1600000, 103, 800000, 5000000, 0, -27, 0, 1, 13200000, 0, 400000, 0, 100000, 6500000, 0, 0, 107, 3, -6, -99, 15, -1, 0, 5, 0, 13, -1, -58, 0, 0, -2, -4, 2, 0, -22, 0].span()
};
    let tree_29 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, -33, 3, 0, 0, -1, -81, 99, 1, 24, 0, -5, 0, -2, -7, 1, 24, -100, 150, 4, 0, 1, 2845, 7, 0, 0, -3, 0, 0, 1, -10, 3, 6, 0, -14, 71, -85, -176, -5, 45, 1009, 2861, -4, 75, 0, 2, 0, -15, 0, -1, 0, 3, 3, -3, -60, 1, 1, 0, 0, -53, -27, 8, -54, 4, 229, 1089, -551, -1, 1199, -15, 0, 0, -6, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 33, 35, 37, 39, 41, 0, 0, 0, 43, 45, 47, 49, 0, 0, 51, 53, 55, 57, 0, 59, 61, 0, 63, 65, 0, 0, 67, 0, 69, 71, 73, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 34, 36, 38, 40, 42, 0, 0, 0, 44, 46, 48, 50, 0, 0, 52, 54, 56, 58, 0, 60, 62, 0, 64, 66, 0, 0, 68, 0, 70, 72, 74, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![6, 6, 6, 3, 5, 1, 4, 2, 5, 5, 5, 3, 5, 0, 2, 3, 0, 2, 0, 5, 5, 4, 0, 0, 0, 3, 3, 0, 2, 0, 0, 3, 7, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 600000, 7400000, 1900000, 4200000, 100000, 14400000, 23600000, 4300000, 600000, 5400000, 25200000, 500000, 6200000, 400000, 400000, -2, 18000000, 100000, 500000, 3600000, 1600000, 4, 0, 1, 2500000, 8500000, 1500000, 25400000, -3, 0, 300000, 100000, 100000, 2900000, 6, 200000, 100000, 71, 100000, 100000, -5, 45, 5000000, 2861, 4100000, 3400000, 100000, 2, 500000, -15, 0, -1, 0, 3, 3, -3, -60, 1, 1, 0, 0, -53, -27, 8, -54, 4, 229, 1089, -551, -1, 1199, -15, 0, 0, -6, 0].span()
};
    let tree_30 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, -23, 3, 0, 0, -4, -57, 70, 1845, 1, 1, -1, 0, 7, -3, -7, 17, -70, 105, 3, 640, 2088, 0, 44, -419, 1, 28, -1, 0, -2, 2, 0, -1, 39, -134, -3, -10, 51, -60, -124, 100, 48, 463, 871, 1, -115, 0, 49, 12, 0, -28, 42, -18, 0, 0, 0, 28, 10, 2, -1, 0, -40, -19, 6, -38, 4, -4, 30, 162, 0, -48, 0, 92, -51, 17, 10, -1, 850, 5, 22, 0, -44, -1, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 45, 0, 47, 49, 0, 51, 53, 55, 57, 0, 0, 0, 0, 59, 0, 61, 63, 0, 65, 67, 69, 0, 71, 0, 73, 75, 0, 77, 79, 0, 0, 81, 83, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 46, 0, 48, 50, 0, 52, 54, 56, 58, 0, 0, 0, 0, 60, 0, 62, 64, 0, 66, 68, 70, 0, 72, 0, 74, 76, 0, 78, 80, 0, 0, 82, 84, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![6, 6, 6, 2, 5, 4, 0, 2, 3, 5, 5, 3, 2, 6, 2, 2, 0, 3, 3, 5, 5, 5, 0, 1, 0, 1, 1, 0, 6, 5, 4, 3, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 5, 2, 0, 2, 3, 0, 0, 5, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 600000, 4000000, 22900000, 4200000, 100000, 6200000, 18000000, 2500000, 600000, 5400000, 2500000, 6400000, 4100000, 100000, 17200000, 600000, 400000, 2900000, 500000, 3600000, 5300000, 3, 3400000, 2088, 100000, 8000000, -419, 4200000, 500000, 100000, 1900000, -2, 2, 0, -1, 600000, -134, 7600000, 100000, 51, 100000, 100000, 1600000, 48, 5000000, 871, 100000, 500000, 0, 16900000, 8500000, 0, -28, 3600000, 100000, 400000, 0, 0, 28, 10, 2, -1, 0, -40, -19, 6, -38, 4, -4, 30, 162, 0, -48, 0, 92, -51, 17, 10, -1, 850, 5, 22, 0, -44, -1, 0].span()
};
    let tree_31 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, -1, 8, 0, 0, -1, 0, -4, 3, 603, 0, -1, 0, 4, 0, -1, -6, 1, 1152, -1, 0, -11, -20, -1, 0, 1, -5, -3, -1, 2, 383, 4470, 0, -108, 0, 1, -11, -1, 61, -1, 0, 0, -1, -4, 212, 92, 1423, 384, -7, 2, 0, 1, -2, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 0, 17, 19, 21, 0, 23, 25, 27, 0, 0, 0, 29, 31, 33, 35, 37, 39, 0, 41, 43, 0, 45, 0, 0, 0, 47, 49, 51, 0, 53, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 0, 18, 20, 22, 0, 24, 26, 28, 0, 0, 0, 30, 32, 34, 36, 38, 40, 0, 42, 44, 0, 46, 0, 0, 0, 48, 50, 52, 0, 54, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 3, 3, 6, 1, 0, 1, 2, 5, 0, 2, 5, 3, 0, 0, 0, 1, 1, 3, 3, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![3600000, 200000, 5000000, 22400000, 100000, 8500000, 14600000, 19200000, -1, 25100000, 18000000, 100000, 603, 25400000, 500000, 25200000, 4, 0, -1, 3000000, 3100000, 2500000, 2900000, 24500000, 6500000, -20, 600000, 100000, 1, 2800000, -3, -1, 2, 100000, 900000, 100000, -108, 13000000, 1, -11, -1, 61, 15000000, 0, 0, -1, -4, 212, 92, 1423, 384, -7, 2, 0, 1, -2, 0].span()
};
    let tree_32 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, 141, -1, 0, 0, -2, -1, 72, 1, -1, 0, 0, 0, 6, -4, 5, 0, 19, -3, -1, -4, 0, 0, 0, 130, 6, -16, -1, 54, 3, 0, -1, 4, 428, -2, -104, 0, 0, -1, -3, 12, 0, 159, -213, 1, 6, -4, -77, 0, -1, 66, 12, 3, 1, 0, -2, 265, -2, -1, 1321, -172, -22, 3, -1, -57, 11].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 21, 0, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 0, 0, 45, 47, 49, 51, 53, 55, 57, 0, 59, 0, 61, 63, 0, 0, 0, 65, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 22, 0, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 0, 0, 46, 48, 50, 52, 54, 56, 58, 0, 60, 0, 62, 64, 0, 0, 0, 66, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 3, 0, 1, 3, 3, 1, 0, 0, 1, 1, 0, 5, 4, 4, 7, 1, 1, 3, 5, 0, 3, 5, 0, 0, 5, 5, 3, 0, 0, 0, 6, 0, 5, 0, 0, 3, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![600000, 500000, 3900000, 2000000, 1500000, 3400000, 12900000, 300000, 3400000, -1, 72, 3000000, 16000000, 0, 100000, 600000, 100000, 100000, 16000000, 2300000, 2900000, 500000, 3200000, 22200000, 3300000, 0, 0, 100000, 500000, 7700000, 6500000, 100000, 100000, 2400000, -1, 100000, 428, 600000, 2900000, 0, 0, -1, 100000, 6000000, 0, 159, -213, 1, 6, -4, -77, 0, -1, 66, 12, 3, 1, 0, -2, 265, -2, -1, 1321, -172, -22, 3, -1, -57, 11].span()
};
    let tree_33 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, -12, 1, 0, 0, -2, -36, 53, 0, 1650, 0, 0, 0, -1, -2, 1, 16, -45, 79, 3, 261, 0, 3465, 15, -292, 0, 12, 0, 0, 1, -28, -1, -4, 38, -38, -25, 22, 36, 28, 790, 0, 21, 1098, 286, -28, 36, 6, 0, -17, 20, -9, 0, 0, 0, 1, -31, -12, 2, 119, -10, 0, -19, 0, 7, 36, 4, 0, 303, 57, 5, 0, -21, 0, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0, 33, 0, 35, 37, 39, 0, 41, 43, 45, 47, 0, 49, 51, 53, 55, 0, 0, 0, 57, 0, 59, 0, 0, 0, 61, 0, 63, 65, 0, 0, 0, 67, 69, 0, 0, 71, 73, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 0, 34, 0, 36, 38, 40, 0, 42, 44, 46, 48, 0, 50, 52, 54, 56, 0, 0, 0, 58, 0, 60, 0, 0, 0, 62, 0, 64, 66, 0, 0, 0, 68, 70, 0, 0, 72, 74, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![6, 6, 6, 6, 5, 6, 0, 2, 1, 5, 5, 4, 0, 6, 2, 2, 0, 5, 0, 5, 5, 5, 0, 1, 2, 2, 5, 0, 6, 5, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 5, 3, 0, 0, 5, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![1500000, 600000, 3800000, 100000, 4200000, 3300000, 6200000, 22900000, 3000000, 600000, 5400000, 100000, 12500000, 4100000, 100000, 18000000, -1, 500000, 1, 500000, 3600000, 5300000, 3, 3400000, 6400000, 900000, 300000, -292, 4200000, 500000, 100000, 100000, 1, -28, -1, 100000, 38, 100000, -25, 22, 36, 100000, 790, 8400000, 8000000, 1098, 286, -28, 600000, 8500000, 0, -17, 600000, 100000, 4100000, 0, 0, 1, -31, -12, 2, 119, -10, 0, -19, 0, 7, 36, 4, 0, 303, 57, 5, 0, -21, 0, 0].span()
};
    let tree_34 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, 99, 0, 0, 0, -1, 0, 51, 0, -1, 0, 0, 0, -22, -6, 1, 0, 6, -67, -1, 0, 0, 0, 5, -5, -244, 26, 0, 0, -29, 679, 2, -184, -31, -6, 0, 0, -7, 1, 0, 2, -112, -2, 52, 30, 6, 0, -1, -1, 0, -49, 33, -257, 1, -68, -38, -2, -13, -1, -15, 0, 0].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 13, 15, 17, 0, 0, 19, 21, 0, 23, 25, 0, 27, 29, 31, 33, 35, 37, 39, 41, 0, 43, 45, 0, 47, 49, 51, 53, 0, 55, 57, 59, 61, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 14, 16, 18, 0, 0, 20, 22, 0, 24, 26, 0, 28, 30, 32, 34, 36, 38, 40, 42, 0, 44, 46, 0, 48, 50, 52, 54, 0, 56, 58, 60, 62, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![2, 2, 2, 3, 0, 1, 2, 5, 5, 0, 0, 6, 0, 0, 0, 3, 0, 0, 5, 6, 6, 2, 1, 0, 0, 0, 5, 1, 0, 3, 0, 2, 2, 0, 3, 2, 2, 5, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![600000, 500000, 3900000, 2000000, 1500000, 6100000, 4000000, 25300000, 3300000, 0, 51, 3300000, 100000, 0, 6500000, 600000, -22, 6500000, 5300000, 2400000, 3400000, 1300000, 11600000, 6400000, 7400000, 0, 100000, 3400000, -244, 2100000, 6200000, 700000, 900000, 679, 2500000, 900000, 2100000, 500000, 0, 20900000, -7, 1, 0, 2, -112, -2, 52, 30, 6, 0, -1, -1, 0, -49, 33, -257, 1, -68, -38, -2, -13, -1, -15, 0, 0].span()
};
    let tree_35 = xgb_inference::Tree {
    base_weights: array![0, 0, 0, 0, 0, 4, 0, 0, 0, 0, -2, 0, 215, 0, 2, -1, -1, 337, -2, 0, 0, 0, 1, 31, 1669, -177, -1, 0, 0, 0, 1, 89, -6, 532, 141, 0, -54].span(),
    left_children: array![1, 3, 5, 7, 9, 11, 0, 13, 0, 0, 15, 17, 0, 19, 0, 21, 0, 23, 25, 27, 29, 0, 0, 31, 33, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    right_children: array![2, 4, 6, 8, 10, 12, 0, 14, 0, 0, 16, 18, 0, 20, 0, 22, 0, 24, 26, 28, 30, 0, 0, 32, 34, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_indices: array![0, 0, 0, 1, 3, 3, 0, 1, 0, 0, 1, 5, 0, 1, 0, 1, 0, 3, 6, 0, 2, 0, 0, 2, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0].span(),
    split_conditions: array![4000000, 200000, 6200000, 22400000, 100000, 8500000, 0, 19200000, 0, 0, 5500000, 100000, 215, 100000, 2, 3100000, -1, 2500000, 4100000, 100000, 6000000, 0, 1, 100000, 900000, -177, 4500000, 0, 0, 0, 1, 89, -6, 532, 141, 0, -54].span()
};
    let tree_36 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_37 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_38 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_39 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_40 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_41 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_42 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_43 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_44 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_45 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_46 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_47 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_48 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_49 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_50 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_51 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_52 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_53 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_54 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_55 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_56 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_57 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_58 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_59 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_60 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_61 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_62 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_63 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_64 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_65 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_66 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_67 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_68 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_69 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_70 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_71 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_72 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_73 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_74 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_75 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_76 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_77 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_78 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_79 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_80 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_81 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_82 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_83 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_84 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_85 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_86 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_87 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_88 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_89 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_90 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_91 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_92 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_93 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_94 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_95 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_96 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_97 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_98 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let tree_99 = xgb_inference::Tree {
    base_weights: array![0].span(),
    left_children: array![0].span(),
    right_children: array![0].span(),
    split_indices: array![0].span(),
    split_conditions: array![0].span()
};
    let num_trees: u32 = 100;
    let base_score: i32 = 95704;
    let opt_type: u8 = 0;
    let trees: Span<xgb_inference::Tree> = array![tree_0, tree_1, tree_2, tree_3, tree_4, tree_5, tree_6, tree_7, tree_8, tree_9, tree_10, tree_11, tree_12, tree_13, tree_14, tree_15, tree_16, tree_17, tree_18, tree_19, tree_20, tree_21, tree_22, tree_23, tree_24, tree_25, tree_26, tree_27, tree_28, tree_29, tree_30, tree_31, tree_32, tree_33, tree_34, tree_35, tree_36, tree_37, tree_38, tree_39, tree_40, tree_41, tree_42, tree_43, tree_44, tree_45, tree_46, tree_47, tree_48, tree_49, tree_50, tree_51, tree_52, tree_53, tree_54, tree_55, tree_56, tree_57, tree_58, tree_59, tree_60, tree_61, tree_62, tree_63, tree_64, tree_65, tree_66, tree_67, tree_68, tree_69, tree_70, tree_71, tree_72, tree_73, tree_74, tree_75, tree_76, tree_77, tree_78, tree_79, tree_80, tree_81, tree_82, tree_83, tree_84, tree_85, tree_86, tree_87, tree_88, tree_89, tree_90, tree_91, tree_92, tree_93, tree_94, tree_95, tree_96, tree_97, tree_98, tree_99].span();
    let mut result: i32 = xgb_inference::accumulate_scores_from_trees(num_trees, trees, input_vector, 0, 0);

    if opt_type == 1 {
        // Implement logic here
    } else {
        result = result + base_score;
    }

    return result;
}